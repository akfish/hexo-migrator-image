// Generated by CoffeeScript 1.6.3
var MatchImageMarkDown, MatchImageUrl, Source, async, extend, file, makeLoaderCallback, makeWorker, sourceDir, util;

extend = hexo.extend;

util = hexo.util;

file = util.file;

sourceDir = hexo.source_dir;

async = require('async');

MatchImageUrl = function(url) {
  var m, optional, p, re1, re2, re3, re4, re5;
  re1 = '(.*?)';
  re2 = '( )';
  re3 = '(")';
  re4 = '(.*?)';
  re5 = '(")';
  p = new RegExp(re1 + re2 + re3 + re4 + re5, ["i"]);
  m = p.exec(url);
  if (m != null) {
    url = m[1];
    optional = m[4];
    return [url, optional];
  }
  return [url, null];
};

MatchImageMarkDown = function(src) {
  var alt_, ex, item, items, m, p, r, re1, re2, re3, re4, re5, re6, re7, rest;
  re1 = '(!)';
  re2 = '(\\[)';
  re3 = '(.*?)';
  re4 = '(\\])';
  re5 = '(\\()';
  re6 = '(.*?)';
  re7 = '(\\))';
  ex = re1 + re2 + re3 + re4 + re5 + re6 + re7;
  p = new RegExp(ex, ["gim"]);
  items = new Array();
  while ((m = p.exec(src)) != null) {
    alt_ = m[3];
    rest = m[6];
    r = MatchImageUrl(rest);
    item = new image(alt_, r[0], r[1]);
    items.push(item);
  }
  return items;
};

makeWorker = function(img, folder) {
  return function(callback) {
    return img.download(folder, callback);
  };
};

makeLoaderCallback = function(source, callback) {
  return function(err, src) {
    if (err != null) {
      return callback(err);
    }
    if (src == null) {
      return callback(new Error("Null source."));
    }
    source.src = src;
    return callback(null, source);
  };
};

module.exports = Source = (function() {
  function Source(path) {
    this.path = path;
    this.src = "";
    this.images = [];
  }

  Source.prototype.load = function(callback) {
    return file.read(this.path, makeLoaderCallback(this, callback));
  };

  return Source;

})();

/*
function(path) {
     this.migrateImages = function(folder, callback) {
        workers = [];
        
        this.images.forEach(function(img) {
            workers.push(makeWorker(img, folder));
        });

        if (workers.length > 0){
            async.parallel(workers, function(err, result) {
                callback(err, result);
            });
        } 
        callback(null, null);
    };
    
 
};
*/

