// Generated by CoffeeScript 1.6.3
var Downloader, Source, async, colorfulLog, colors, downloadImages, extend, file, imageFolder, loadSourceFile, openSourceFolder, request, sourceDir, util;

extend = hexo.extend;

util = hexo.util;

file = util.file;

sourceDir = hexo.source_dir;

imageFolder = "images\\";

request = require('request');

async = require('async');

colors = require('colors');

Source = require('./MarkdownSource');

Downloader = require('./Downloader');

colorfulLog = function(verb, count, msg) {
  var format;
  format = "" + verb.green;
  format += count != null ? ("\t" + count + "\t").cyan : "";
  format += msg;
  return console.log(format);
};

openSourceFolder = function(next) {
  colorfulLog("Open", 1, sourceDir);
  return file.dir(sourceDir, function(files) {
    files = files.filter(function(f) {
      return f.match(".*?\.md");
    });
    colorfulLog("Found", files.length, "posts");
    return typeof next === "function" ? next(null, files) : void 0;
  });
};

loadSourceFile = function(files, next) {
  var makeTask, tasks;
  tasks = [];
  makeTask = function(path) {
    return function(callback) {
      var src;
      src = new Source(path);
      return src.load(callback);
    };
  };
  files.forEach(function(f) {
    var fullPath;
    fullPath = sourceDir + f;
    return tasks.push(makeTask(fullPath));
  });
  return async.parallel(tasks, function(err, results) {
    var src, sum, _i, _len;
    colorfulLog("Load", results.length, "source files");
    sum = 0;
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      src = results[_i];
      sum += src.images.length;
    }
    colorfulLog("Found", sum, "images");
    return typeof next === "function" ? next(null, results) : void 0;
  });
};

downloadImages = function(srcs, next) {
  var downloader, tasks;
  tasks = [];
  downloader = new Downloader(sourceDir + imageFolder);
  srcs.forEach(function(src) {
    return src.images.forEach(function(img) {
      return tasks.push(function(callback) {
        return img.download(downloader, callback);
      });
    });
  });
  colorfulLog("Download", tasks.length, "images");
  return async.parallel(tasks, function(err, results) {
    colorfulLog("Failed", (err != null ? err.length : 0), "images");
    return typeof next === "function" ? next(null, srcs) : void 0;
  });
};

extend.migrator.register('image', function(args) {
  console.log("whatever");
  return async.waterfall([openSourceFolder, loadSourceFile, downloadImages], function(err, result) {
    console.log("Summary");
    colorfulLog("Error", (err != null ? err.length : 0), "");
    return colorfulLog("Success", (result != null ? result.length : 0), "");
  });
});
