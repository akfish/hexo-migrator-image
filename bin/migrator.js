// Generated by CoffeeScript 1.6.3
var Source, async, colorfulLog, colors, extend, file, loadSourceFile, openSourceFolder, request, sourceDir, util;

extend = hexo.extend;

util = hexo.util;

file = util.file;

sourceDir = hexo.source_dir;

request = require('request');

async = require('async');

colors = require('colors');

Source = require('./MarkdownSource');

colorfulLog = function(verb, count, msg) {
  var format;
  format = "" + verb.green;
  format += count != null ? ("\t" + count + "\t").cyan : "";
  format += msg;
  return console.log(format);
};

openSourceFolder = function(next) {
  colorfulLog("Open", 1, sourceDir);
  return file.dir(sourceDir, function(files) {
    files = files.filter(function(f) {
      return f.match(".*?\.md");
    });
    colorfulLog("Found", files.length, "posts");
    return typeof next === "function" ? next(null, files) : void 0;
  });
};

loadSourceFile = function(files, next) {
  var makeTask, tasks;
  tasks = [];
  makeTask = function(path) {
    return function(callback) {
      var src;
      src = new Source(path);
      return src.load(callback);
    };
  };
  files.forEach(function(f) {
    var fullPath;
    fullPath = sourceDir + f;
    return tasks.push(makeTask(fullPath));
  });
  return async.parallel(tasks, function(err, results) {
    var img, src, sum, _i, _j, _len, _len1, _ref;
    colorfulLog("Load", results.length, "source files");
    sum = 0;
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      src = results[_i];
      sum += src.images.length;
      _ref = src.images;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        img = _ref[_j];
        colorfulLog("[GET]", img.url, [img.alt, img.opt]);
      }
    }
    colorfulLog("Found", sum, "images");
    return typeof next === "function" ? next(null, results) : void 0;
  });
};

extend.migrator.register('image', function(args) {
  console.log("whatever");
  return async.waterfall([openSourceFolder, loadSourceFile], function(err, result) {
    console.log("All done!");
    console.log("Error", err != null ? err.length : void 0, "");
    return console.log("Success", result != null ? result.length : void 0, "");
  });
});
